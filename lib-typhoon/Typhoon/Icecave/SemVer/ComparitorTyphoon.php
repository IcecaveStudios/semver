<?php

/*
 * This file was generated by [Typhoon](https://github.com/eloquent/typhoon).
 *
 * Copyright Â© 2012 Erin Millard
 *
 * For the full copyright and license information, please view the
 * [LICENSE](https://raw.github.com/eloquent/typhoon/master/LICENSE)
 * file that is distributed with Typhoon.
 */

namespace Typhoon\Icecave\SemVer;

use Typhoon\Exception\MissingArgumentException;
use Typhoon\Exception\UnexpectedArgumentException;
use Typhoon\Exception\UnexpectedArgumentValueException;
use Typhoon\Validator;

class ComparitorTyphoon extends Validator
{
    public function validateConstruct(array $arguments)
    {
        if (count($arguments) > 0) {
            throw new UnexpectedArgumentException(0, $arguments[0]);
        }
    }

    public function compare(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 2) {
            if ($argumentCount < 1) {
                throw new MissingArgumentException('left', 0, 'mixed');
            }
            throw new MissingArgumentException('right', 1, 'mixed');
        } elseif ($argumentCount > 2) {
            throw new UnexpectedArgumentException(2, $arguments[2]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('left', $index, $argument, 'mixed');
            }
        };
        $check($arguments[0], 0);

        $check = function($argument, $index) {
            $check = function($value) {
                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('right', $index, $argument, 'mixed');
            }
        };
        $check($arguments[1], 1);
    }

    public function compareIdentifierParts(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 2) {
            if ($argumentCount < 1) {
                throw new MissingArgumentException('left', 0, 'array<string>');
            }
            throw new MissingArgumentException('right', 1, 'array<string>');
        } elseif ($argumentCount > 3) {
            throw new UnexpectedArgumentException(3, $arguments[3]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                $primaryCheck = function($value) {
                    return is_array($value);
                };
                if (!$primaryCheck($value)) {
                    return false;
                }

                $keyCheck = function($value) {
                    return true;
                };
                $valueCheck = function($value) {
                    return is_string($value);
                };
                foreach ($value as $key => $subValue) {
                    if (!$keyCheck($key)) {
                        return false;
                    }
                    if (!$valueCheck($subValue)) {
                        return false;
                    }
                }

                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('left', $index, $argument, 'array<string>');
            }
        };
        $check($arguments[0], 0);

        $check = function($argument, $index) {
            $check = function($value) {
                $primaryCheck = function($value) {
                    return is_array($value);
                };
                if (!$primaryCheck($value)) {
                    return false;
                }

                $keyCheck = function($value) {
                    return true;
                };
                $valueCheck = function($value) {
                    return is_string($value);
                };
                foreach ($value as $key => $subValue) {
                    if (!$keyCheck($key)) {
                        return false;
                    }
                    if (!$valueCheck($subValue)) {
                        return false;
                    }
                }

                return true;
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('right', $index, $argument, 'array<string>');
            }
        };
        $check($arguments[1], 1);

        if ($argumentCount > 2) {
            $check = function($argument, $index) {
                $check = function($value) {
                    return is_bool($value);
                };
                if (!$check($argument)) {
                    throw new UnexpectedArgumentValueException('invertZeroLengthChecks', $index, $argument, 'boolean');
                }
            };
            $check($arguments[2], 2);
        }
    }

    public function compareIdentifierPart(array $arguments)
    {
        $argumentCount = count($arguments);
        if ($argumentCount < 2) {
            if ($argumentCount < 1) {
                throw new MissingArgumentException('left', 0, 'string');
            }
            throw new MissingArgumentException('right', 1, 'string');
        } elseif ($argumentCount > 2) {
            throw new UnexpectedArgumentException(2, $arguments[2]);
        }

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('left', $index, $argument, 'string');
            }
        };
        $check($arguments[0], 0);

        $check = function($argument, $index) {
            $check = function($value) {
                return is_string($value);
            };
            if (!$check($argument)) {
                throw new UnexpectedArgumentValueException('right', $index, $argument, 'string');
            }
        };
        $check($arguments[1], 1);
    }
}
